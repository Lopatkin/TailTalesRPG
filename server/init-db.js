const mongoose = require('mongoose');
const Location = require('./models/Location');
const Item = require('./models/Item');
require('dotenv').config();
console.log("MONGODB_URI:", process.env.MONGODB_URI);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const mongoUri = process.env.MONGODB_URI;
if (!mongoUri) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env');
  process.exit(1);
}
mongoose.connect(mongoUri, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const db = mongoose.connection;

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
const createItems = async () => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');
  
  const items = [
    {
      name: '–ü–∞–ª–∫–∞',
      description: '–û–±—ã—á–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–∞–ª–∫–∞, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π',
      type: 'resource',
      rarity: 'common',
      icon: 'ü¶Ø',
      value: 1
    },
    {
      name: '–Ø–≥–æ–¥—ã',
      description: '–°–≤–µ–∂–∏–µ –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –Ω–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
      type: 'consumable',
      rarity: 'common',
      icon: 'ü´ê',
      value: 5
    },
    {
      name: '–ì—Ä–∏–±—ã',
      description: '–°—ä–µ–¥–æ–±–Ω—ã–µ –ª–µ—Å–Ω—ã–µ –≥—Ä–∏–±—ã, —Ö–æ—Ä–æ—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è',
      type: 'consumable',
      rarity: 'common',
      icon: 'üçÑ',
      value: 8
    },
    {
      name: '–ö–∞–º–µ–Ω—å',
      description: '–¢–≤–µ—Ä–¥—ã–π –∫–∞–º–µ–Ω—å, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
      type: 'resource',
      rarity: 'common',
      icon: 'ü™®',
      value: 3
    }
  ];

  const createdItems = [];
  for (const itemData of items) {
    const existingItem = await Item.findOne({ name: itemData.name });
    if (!existingItem) {
      const item = new Item(itemData);
      await item.save();
      createdItems.push(item);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`);
    } else {
      createdItems.push(existingItem);
      console.log(`‚ÑπÔ∏è –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingItem.name}`);
    }
  }
  
  return createdItems;
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
const createLocations = async (items) => {
  console.log('\n–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π...');
  
  const stick = items.find(item => item.name === '–ü–∞–ª–∫–∞');
  const berries = items.find(item => item.name === '–Ø–≥–æ–¥—ã');
  const mushrooms = items.find(item => item.name === '–ì—Ä–∏–±—ã');
  const stone = items.find(item => item.name === '–ö–∞–º–µ–Ω—å');

  const locations = [
    {
      name: '–õ–µ—Å',
      description: '–¢–µ–º–Ω—ã–π –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ—Å —Å –≤—ã—Å–æ–∫–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.',
      type: 'forest',
      coordinates: { x: 0, y: 0 },
      availableActions: [
        {
          name: '–ù–∞–π—Ç–∏ –ø–∞–ª–∫—É',
          description: '–ü–æ–∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∞–ª–∫—É —Å—Ä–µ–¥–∏ —É–ø–∞–≤—à–∏—Ö –≤–µ—Ç–æ–∫',
          experienceReward: 5,
          itemReward: stick._id,
          requiredLevel: 1
        },
        {
          name: '–ù–∞–π—Ç–∏ —è–≥–æ–¥—ã',
          description: '–°–æ–±—Ä–∞—Ç—å —Å–ø–µ–ª—ã–µ –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã',
          experienceReward: 3,
          itemReward: berries._id,
          requiredLevel: 1
        },
        {
          name: '–ù–∞–π—Ç–∏ –≥—Ä–∏–±—ã',
          description: '–ü–æ–∏—Å–∫–∞—Ç—å —Å—ä–µ–¥–æ–±–Ω—ã–µ –≥—Ä–∏–±—ã –ø–æ–¥ –¥–µ—Ä–µ–≤—å—è–º–∏',
          experienceReward: 4,
          itemReward: mushrooms._id,
          requiredLevel: 1
        }
      ],
      backgroundImage: '/images/forest.jpg'
    },
    {
      name: '–î–µ—Ä–µ–≤–Ω—è',
      description: '–£—é—Ç–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ –∂–∏—Ç–µ–ª—è–º–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã.',
      type: 'village',
      coordinates: { x: 1, y: 0 },
      availableActions: [],
      backgroundImage: '/images/village.jpg'
    },
    {
      name: '–ë–æ–ª–æ—Ç–æ',
      description: '–ú—Ä–∞—á–Ω–æ–µ –±–æ–ª–æ—Ç–æ —Å —Ç—É–º–∞–Ω–æ–º. –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º, –Ω–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã.',
      type: 'swamp',
      coordinates: { x: 0, y: 1 },
      availableActions: [],
      backgroundImage: '/images/swamp.jpg'
    },
    {
      name: '–ü–µ—â–µ—Ä–∞',
      description: '–¢–µ–º–Ω–∞—è –ø–µ—â–µ—Ä–∞ –≤ –≥–æ—Ä–∞—Ö. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ü–µ–Ω–Ω—ã–µ –º–∏–Ω–µ—Ä–∞–ª—ã –∏ –∫–∞–º–Ω–∏.',
      type: 'cave',
      coordinates: { x: -1, y: 0 },
      availableActions: [
        {
          name: '–ù–∞–π—Ç–∏ –∫–∞–º–µ–Ω—å',
          description: '–ü–æ–∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–º–Ω–∏ –≤ –ø–µ—â–µ—Ä–µ',
          experienceReward: 6,
          itemReward: stone._id,
          requiredLevel: 1
        }
      ],
      backgroundImage: '/images/cave.jpg'
    }
  ];

  // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
  const createdLocations = [];
  for (const locationData of locations) {
    const existingLocation = await Location.findOne({ name: locationData.name });
    if (!existingLocation) {
      const location = new Location(locationData);
      await location.save();
      createdLocations.push(location);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ${location.name}`);
    } else {
      createdLocations.push(existingLocation);
      console.log(`‚ÑπÔ∏è –õ–æ–∫–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingLocation.name}`);
    }
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
  console.log('\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏...');
  
  const forest = createdLocations.find(l => l.name === '–õ–µ—Å');
  const village = createdLocations.find(l => l.name === '–î–µ—Ä–µ–≤–Ω—è');
  const swamp = createdLocations.find(l => l.name === '–ë–æ–ª–æ—Ç–æ');
  const cave = createdLocations.find(l => l.name === '–ü–µ—â–µ—Ä–∞');

  // –õ–µ—Å —Å–≤—è–∑–∞–Ω —Å –¥–µ—Ä–µ–≤–Ω–µ–π (–≤–æ—Å—Ç–æ–∫) –∏ –±–æ–ª–æ—Ç–æ–º (—é–≥)
  forest.connectedLocations = [
    { location: village._id, direction: 'east' },
    { location: swamp._id, direction: 'south' }
  ];

  // –î–µ—Ä–µ–≤–Ω—è —Å–≤—è–∑–∞–Ω–∞ —Å –ª–µ—Å–æ–º (–∑–∞–ø–∞–¥) –∏ –ø–µ—â–µ—Ä–æ–π (–∑–∞–ø–∞–¥)
  village.connectedLocations = [
    { location: forest._id, direction: 'west' },
    { location: cave._id, direction: 'west' }
  ];

  // –ë–æ–ª–æ—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ª–µ—Å–æ–º (—Å–µ–≤–µ—Ä)
  swamp.connectedLocations = [
    { location: forest._id, direction: 'north' }
  ];

  // –ü–µ—â–µ—Ä–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–µ—Ä–µ–≤–Ω–µ–π (–≤–æ—Å—Ç–æ–∫)
  cave.connectedLocations = [
    { location: village._id, direction: 'east' }
  ];

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
  await forest.save();
  await village.save();
  await swamp.save();
  await cave.save();

  console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  
  return createdLocations;
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const initDatabase = async () => {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TailTales RPG...\n');
    
    await createItems();
    const locations = await createLocations();
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${await Item.countDocuments()}`);
    console.log(`üó∫Ô∏è –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞—Ü–∏–π: ${await Location.countDocuments()}`);
    
    console.log('\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:');
    locations.forEach(location => {
      console.log(`  - ${location.name} (${location.type})`);
    });
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
db.once('open', () => {
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  initDatabase();
});

db.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
  process.exit(1);
});


