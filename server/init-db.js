const mongoose = require('mongoose');
const Item = require('./models/Item');
require('dotenv').config();
console.log("MONGODB_URI:", process.env.MONGODB_URI);

const mongoUri = process.env.MONGODB_URI;
if (!mongoUri) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env');
  process.exit(1);
}
mongoose.connect(mongoUri, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const db = mongoose.connection;

const createItems = async () => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');
  
  const items = [
    {
      name: '–ü–∞–ª–∫–∞',
      description: '–û–±—ã—á–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–∞–ª–∫–∞, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π',
      type: 'resource',
      rarity: 'common',
      icon: 'ü¶Ø',
      value: 1,
      _id: 'item_stick'
    },
    {
      name: '–Ø–≥–æ–¥—ã',
      description: '–°–≤–µ–∂–∏–µ –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –Ω–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
      type: 'consumable',
      rarity: 'common',
      icon: 'ü´ê',
      value: 5,
      _id: 'item_berries'
    },
    {
      name: '–ì—Ä–∏–±—ã',
      description: '–°—ä–µ–¥–æ–±–Ω—ã–µ –ª–µ—Å–Ω—ã–µ –≥—Ä–∏–±—ã, —Ö–æ—Ä–æ—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è',
      type: 'consumable',
      rarity: 'common',
      icon: 'üçÑ',
      value: 8,
      _id: 'item_mushrooms'
    },
    {
      name: '–ö–∞–º–µ–Ω—å',
      description: '–¢–≤–µ—Ä–¥—ã–π –∫–∞–º–µ–Ω—å, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
      type: 'resource',
      rarity: 'common',
      icon: 'ü™®',
      value: 3,
      _id: 'item_stone'
    }
  ];

  const createdItems = [];
  for (const itemData of items) {
    const existingItem = await Item.findOne({ name: itemData.name });
    if (!existingItem) {
      const item = new Item(itemData);
      await item.save();
      createdItems.push(item);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`);
    } else {
      createdItems.push(existingItem);
      console.log(`‚ÑπÔ∏è –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingItem.name}`);
    }
  }
  
  return createdItems;
};

const initDatabase = async () => {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TailTales RPG...\n');
    
    await createItems();
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${await Item.countDocuments()}`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

db.once('open', () => {
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  initDatabase();
});

db.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
  process.exit(1);
});