import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { performAction, authenticatePlayer } from '../store/slices/playerSlice';
import { fetchLocationById } from '../store/slices/locationSlice';
import { addItem } from '../store/slices/inventorySlice';
import './LocationView.css';

const LocationView = () => {
  const dispatch = useDispatch();
  const player = useSelector(state => state.player.data);
  const currentLocation = useSelector(state => state.player.currentLocation);
  const [selectedTab, setSelectedTab] = useState('location');
  const [actionResult, setActionResult] = useState(null);

  useEffect(() => {
    if (player && player.currentLocation) {
      dispatch(fetchLocationById(player.currentLocation));
    }
  }, [dispatch, player]);

  const handleAction = async (actionName) => {
    if (!player || !currentLocation) return;

    try {
      const result = await dispatch(performAction({
        playerId: player._id,
        locationId: currentLocation._id,
        actionName
      })).unwrap();

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      if (result.itemGained) {
        const action = currentLocation.availableActions.find(a => a.name === actionName);
        if (action && action.itemReward) {
          dispatch(addItem({ item: action.itemReward, quantity: 1 }));
        }
      }

      setActionResult({
        type: 'success',
        message: result.message,
        experienceGained: result.experienceGained,
        itemGained: result.itemGained
      });

      // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setActionResult(null), 3000);
    } catch (error) {
      setActionResult({
        type: 'error',
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è'
      });
      setTimeout(() => setActionResult(null), 3000);
    }
  };

  if (!player) {
    return (
      <div className="location-view">
        <div className="auth-message">
          <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TailTales RPG!</h2>
          <p>–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</p>
          <button className="telegram-auth-btn">
            –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram
          </button>
          <div style={{ marginTop: '12px' }}>
            <button
              className="telegram-auth-btn"
              onClick={() => dispatch(authenticatePlayer({
                telegramId: 'TEST_USER_001',
                username: 'test_user',
                firstName: 'Test',
                lastName: 'User',
                avatar: ''
              }))}
            >
              –í–æ–π—Ç–∏ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!currentLocation) {
    return (
      <div className="location-view">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–∏...</div>
      </div>
    );
  }

  return (
    <div className="location-view">
      <div className="location-header">
        <h2>{currentLocation.name}</h2>
        <p className="location-description">{currentLocation.description}</p>
      </div>

      <div className="location-tabs">
        <button 
          className={`tab-button ${selectedTab === 'location' ? 'active' : ''}`}
          onClick={() => setSelectedTab('location')}
        >
          –õ–æ–∫–∞—Ü–∏—è
        </button>
        <button 
          className={`tab-button ${selectedTab === 'items' ? 'active' : ''}`}
          onClick={() => setSelectedTab('items')}
        >
          –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
        </button>
      </div>

      {selectedTab === 'location' && (
        <div className="location-content">
          <div className="location-visual">
            <div className="location-background">
              {currentLocation.backgroundImage ? (
                <img src={currentLocation.backgroundImage} alt={currentLocation.name} />
              ) : (
                <div className="location-placeholder">
                  üèûÔ∏è {currentLocation.name}
                </div>
              )}
            </div>
          </div>

          <div className="location-actions">
            <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
            {currentLocation.availableActions && currentLocation.availableActions.length > 0 ? (
              <div className="actions-list">
                {currentLocation.availableActions.map((action, index) => (
                  <button
                    key={index}
                    className="action-button"
                    onClick={() => handleAction(action.name)}
                    disabled={player.level < action.requiredLevel}
                  >
                    <div className="action-name">{action.name}</div>
                    <div className="action-description">{action.description}</div>
                    <div className="action-rewards">
                      {action.experienceReward && (
                        <span className="exp-reward">+{action.experienceReward} –æ–ø—ã—Ç–∞</span>
                      )}
                      {action.itemReward && (
                        <span className="item-reward">+ –ø—Ä–µ–¥–º–µ—Ç</span>
                      )}
                    </div>
                    {player.level < action.requiredLevel && (
                      <div className="level-requirement">
                        –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {action.requiredLevel}
                      </div>
                    )}
                  </button>
                ))}
              </div>
            ) : (
              <p className="no-actions">–ù–∞ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>
            )}
          </div>
        </div>
      )}

      {selectedTab === 'items' && (
        <div className="location-items">
          <h3>–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏:</h3>
          {currentLocation.availableActions && currentLocation.availableActions.length > 0 ? (
            <div className="items-list">
              {currentLocation.availableActions
                .filter(action => action.itemReward)
                .map((action, index) => (
                  <div key={index} className="location-item">
                    <div className="item-icon">{action.itemReward.icon || 'üì¶'}</div>
                    <div className="item-info">
                      <div className="item-name">{action.itemReward.name}</div>
                      <div className="item-description">{action.itemReward.description}</div>
                    </div>
                  </div>
                ))}
            </div>
          ) : (
            <p className="no-items">–ù–∞ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤</p>
          )}
        </div>
      )}

      {actionResult && (
        <div className={`action-result ${actionResult.type}`}>
          <div className="result-message">{actionResult.message}</div>
          {actionResult.experienceGained > 0 && (
            <div className="exp-gained">+{actionResult.experienceGained} –æ–ø—ã—Ç–∞</div>
          )}
          {actionResult.itemGained && (
            <div className="item-gained">–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!</div>
          )}
        </div>
      )}
    </div>
  );
};

export default LocationView;



